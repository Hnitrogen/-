哈尔滨工业大学 计算机网络(笔记)

P4
ISP : 网络业务提供商(isp --> i -> internet s -> server p -> provider)
这个在中国就是移动，电信，联通
(不同等级的ISP逐层连接构成了我们现在的Internet)

P5
N个节点互联 需要n(n-1)/2 条边 (N^2链路问题) --> 让计算机与交换设备链接(O(n)) --> 交换网络(支持动态转接，这样就不需要大量端口去一一匹配)

最典型的电路交换网络: 电话网络
资源独占(当双方都不说话的时候，信道仍被占用)

而电路交换网络的信道是可以被共享的，这种技术成为 "多路复用" 

P6
多路复用技术通常有一下四类: 

(1)	频分 多路复用 : 有线电视网络
每个用户占用不同的频带

(2)时分 多路复用 
将时间化为帧 ，每个用户在每个帧中占用固定序列的时隙(周期性)

(3)波分 多路复用
光纤通信中多见,每个用户用不同波长的光(频率)

(4)码分 多路复用 
广泛用于无线链路共享(如蜂窝网络,卫星通信等)
每个用户分配一个唯一的 m bit码片序列(其中的0用-1,1用+1来表示)
各用户码片序列相互正交

P7
报文交换(一次性的将一个文件(报文)转发到某个节点)
常见就是: 上世纪的电报

分组交换: 将报文拆分成一系列较小的数据包 --> 还要加上头部信息(产生额外开销)

分组交换也能信道共享: 报文片段会像队列一样被传输 , 叫 统计多路复用
但是A可能传输比B多(1010111) A->1 B->0 

报文交换 和 分组交换 都采用存储-转发的交换方式,只是
报文交换 以完整的报文进行
分组交换 以较小的分组进行

P8

报文交换一次就是整个报文的存储与转发,所以服务器的缓存至少要是报文的大小

只考时延,分组交换的时间更低(报文交换是串行的,而分组交换是并行传输的)
且分组交换需要的缓存更小

结论: 分组交换更优于报文交换


### P10
计算机网络的性能

(1) 速率: 单位时间传输数据的量 b/s kb/s Mb/s

(2) 带宽: 在计算机网络中是指数字信道所能传输的最大数据率

(3) 时延(delay): 延迟
    为什么 分组交换 会产生延迟和丢包？ 
    延迟: 数据包在排队，所以会有延迟
    丢包: 分组交换采用储存转发的模式 --> 当节点缓存不够的时候就会丢包

    四类延迟
    (1) 节点处理延迟 (在路由中用于确定输出链路而而产生的延迟)
    (2) 排队延迟  (等待输出链路的延迟)
    (3) 传输延迟  取决于 链路带宽 | 分组长度   (发送时间)
    (4) 传播延迟  取决于 物理链路长度  | 信号传播的速度     (行驶中)

    传播时延,车辆按照高速公路的限速(介质传的播速度),从一端到另一端(两个链路节点之间的空间距离)的耗时.  
    传输时延,车辆交完费后,收费抬起栏杆,车辆再次驶入“高速”(出链路)这个过程的耗时. (路由器将分组推送到出链路的耗时)
    
传输延迟 :  L/R     L: 分组长度  R: 链路带宽
传播延迟 :  d/s     d: 物理链路的长度   s: 信号传播的速度


时延带宽积 : 传播时延 x 带宽
表示: 这个物理链路上能容纳多少比特数据

丢包率 : ~

吞吐量 : 表示发送端和接收端之间传送数据的速率(取决于端到端中吞吐量最小的(min) )



### 计算机网络的体系结构

分层结构(模块化的分层 利于 整个系统的更新和维护) --> 层数太多会影响效率

上层实体使用下一层实体提供的服务(垂直的)

OSI参考模型 ： 由国际组织提出的分层网络结构 --> 目的是实现不同网络之间的互联互通
(理论成功,市场失败的理论模型)

7层 物理层 -> 数据链路层 -> 网络层 -> 传输层 -> 会话层 -> 表示层 -> 应用层

中间系统(路由器)只需要处理 物理层,数据链路层,网络层  ,其他四层是端系统处理的

物理层 
    接口特性                                比特同步
    比特编码                                传输模式  单工 : 电视(单向传输)         
    数据率(在物理层上以多快的速度传输速率)            半双工 : 双向传输但是不能同时进行(对讲机)


数据链路层
    对数据(来自/往 物理层的数据) 加头加尾(添加的叫 帧) 
    物理寻址    在帧头增加 谁发送数据 谁接受数据 的地址信息  
    这个层还能控制端对端的数据传输速率,访问的控制权

网络层功能
	逻辑寻址 : 确保数据分组(跨越多个网络)能被送达目的主机(ip地址)

传输层功能
	分段与重组
	端到端的 连接控制，流量控制，差错控制

会话层
	不会进行分割(分段与重组)
	但是会插入一些对话控制点 --> 用于建立维护会话
	还有同步控制点  --> “同步点”

表示层
	处理端到端数据 语义和语法不同的问题(Linux编码 --> Windwos编码)
	加密/解密
	压缩/解压缩(其实还包括解码)

应用层 
	HTTP 网页协议   FTP 文件传输协议	 SMTP 邮件协议  (这就都叫 服务)


五层参考模型(综合OSI 和 TCP/IP)
	物理层 -> 数据链路层 -> 网络层 -> 传输层 -> 应用层

自己理解了一下 : 当我在家使用WIFI上网冲浪！

物理层	 		WIFI的物理性质和功能

数据链路层 		确定是我而不是同一局域网内的其他人,将数据给我 
				(路由器 到 连接同一交换设备的不同主机)
				(小区网络入口 到 小区每一户人家)

网络层		    负责数据的分组转发(跨越多个网络实现 端到端 服务器到路由器)

传输层			维护数据传输的稳定(降低延迟，多路复用，减少丢包率)

应用层           确定服务的类型(HTTP SMTP FTP)

路由器比交换机多了一个网络层(用于在同一局域网内 确定设备(设备ip) ) 


计算机网络发展历史

小型网络 -> 网络互联和私有网络涌现 -> 1983部署TCP/IP

1990后期  Web应用诞生 即时消息系统(QQ) P2P文件共享

大型服务提供商(google ,microsoft)可以创建专有网络绕过顶级ISP来提供服务

云时代


网络应用的基本原理

	网络应用的体系结构

		一些常见的网络应用: QQ , baidu , email , 迅雷 ， 支付宝 ，微信 ， 云 ，淘宝

	(1) 客户机/服务器结构(C/S)	--> Web
		服务器: 7x24h提供服务
			   有永久性域名
			   利用大量服务器,拓展性强
		客户机:
			   与服务器通信,间歇性接入网络
			   可以使用动态IP
			   不会与其他服务器通信
		
	(2)点对点(peer to peer) P2P
		没有永远在线的服务器
		任意端系统/节点之间可以直接通信
		节点间歇性接入网络
		节点可能改变IP

		和CS相比 P2P实现复杂，难于管理但是高度可伸缩

	(3)混合结构
		文件传输使用P2P，文件的搜索采用C/S
			（每个节点向中央服务器登记自己的内容)
			 (用户从节点完成P2P文件传输)


网络应用进程通信

	进程间通信依靠Socket(套接字)发送/接受消息(Socket是和网络相关的API)

	一台主机上的网络应用是并行的,为了区别(标识)
		IP   	定位主机
		Port 	用端口号区分进程   HTTP 80 MailServer 25
	
	网络应用需要遵循应用层协议
		通过标准化的协议(由RFC定义)来实现交互操作(如HTTP协议)
		
网络应用对传输服务的需求	数据丢失(丢包)	延迟		带宽
	根据这些需求有			  TCP服务			     UDP服务
					C/S间会建立连接		无连接
					可靠的传输			 不可靠的数据传输
					流量控制
					拥塞控制
					
	UDP可以说是最基本的服务协议		
	
	
	
Web 应用

	网页包含多个对象: HTML CSS JS IMG MP4 ...
	还有就是网页包含对其他对象引用的链接

	web对象的寻址
	URL   //host:port/path
	eg.   www.w3cschool.edu/css/pic.png
			host name        path name

	(1)	HTTP协议概述
		万维网应用遵循HTML传输协议
		C/S结构
		有 http 1.1 、 1.0 版本

	服务器在80端口等待客户的请求

	传输采用的的是 无状态 方式 : 服务器不维护任何有关客户端过去的发送请求
	web应用的连接依靠 http协议  <-- 依靠的是TCP

	根据TCP连接方式的不同: 
		(1) 非持久性连接
		C -> TCP请求 -> S:在80端口等待请求 -> 建立连接 -> C: 发出http请求 -> S:接受到请求,并通过Socket将文件传给客户端 -> 关闭连接 -> C:解释(渲染)HTML(文件)

		//在非持久性连接中,http连接在传输过一次文件之后就断开,如果html文件中存在图片的超链接或者其他指向的链接,接下来C/S会重复这样的  建立一次连接传一次文件  的操作

		规定: RTT时间 : 指的是发送一个很小的数据包到服务器所需要的时间

		Total	= 2RTT + 文件发送的时间	(太慢了捏,还会增加服务器压力)


		(2) 持久性连接
		发送响应后,服务器保持TCP连接的打开 --> 后续的消息可以通过这个连接传输


HTTP请求消息
	(1)	请求消息
	(2) 响应消息

	Client 可以将数据上传给服务器(如填表单,输入账号)
	可以通过Apache搭建web服务 = = (有点古老)

HTTP响应状态代码 
	Server在返回Client的请求之后 会返回 Http的响应状态码 和 数据
	常见的HTTP响应状态代码 : 404 502 200 301 ...

Cookie技术	(http协议是无状态的)
	很多时候应用需要服务器掌握客户端的状态,如上网购物,需要有会话状态去保存上一次加入购物车的商品(会话)

	cookie技术其实就是服务器用来标记用户身份唯一的技术

		当你第一次访问youtube的时候,你request的响应会返回一个 set-cookie : xxxx 存在浏览器中
		之后你再访问 youtube的时候,你的http请求的头部就有cookie : xxxx
		这样youtube就能通过服务器的数据查到你的身份,给你提供特殊的服务

		cookie的作用总结: 
			身份认证		购物车    推荐		web email    账户密码的保存   -->  隐私问题

Web缓存/代理服务器技术
		一种性能优化的技术	(1)	缩短客户请求的响应时间
							(2) 减小流量
							(3) 在大范围实现内容分发

实现: 在 用户 和 服务器之间设置一个代理服务器   Client  --> 代理服务器 --> Server 
	  如果缓存服务器里面有Client请求的直接返回,否则代理服务器向服务器请求再返回
	  这个缓存命中率在(0.2 ~ 0.7)之间

缓存是一种普适的设计思想,在CPU上也有这样的缓存设计

这里会有一个版本问题 (代理服务器 和 源服务器)之间数据版本的问题


Email 应用

	邮件客户端
	邮件服务器
	SMTP协议

	如果对方不在线,你的邮件没办法被接收,那么Client就会一直发送
	所以邮件服务器就是缓存你的邮件

	多媒体邮件扩展
		在邮件的头部增加额外的行(声明内容类型)

Email 应用在应用层使用了多种协议(与Web应用不同) 比如在发送邮件和转发的时候,使用的是 SMTP 协议
但是在客户接受的时候使用  邮件访问协议
	常见的邮件访问协议: POP IMAP HTTP 
		POP协议有两种模式   
			(1) 下载并删除   下载到本地,Server删除,无法信息同步
			(2) 下载并保持 
